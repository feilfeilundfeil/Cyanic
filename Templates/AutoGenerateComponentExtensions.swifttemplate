<%
func lowerCamelCaseName(for type: Type) -> String {
    let name: String = type.name
    return name.prefix(1).lowercased() + name.dropFirst()
}
-%>
// sourcery:file:DataSourceControllers+<%= argument["project"] as? String ?? "Cyanic" %>.swift
<%_ if let isFramework = argument["isFramework"] as? Bool, isFramework {-%>
<%_ } else { -%>
import Cyanic

<%_ } -%>
// swiftlint:disable all
public extension ComponentsController {
<%_ for type in types.all where type.annotations["AutoGenerateComponentExtension"] != nil {-%>
<%_ let functionName: String = lowerCamelCaseName(for: type) -%>

    /**
        Generates a <%= type.name %> instance and configures its properties with the given closure. You must provide a
        unique id in the configuration block, otherwise it will force a fatalError.
        - Parameters:
            - configuration: The closure that mutates the mutable <%= type.name %>.
            - mutableComponent: The <%= type.name %> instance to be mutated/configured.
        - Returns:
            <%= type.name %>
    */
    @discardableResult
    mutating func <%= functionName %>(configuration: (_ mutableComponent: inout <%= type.name %>) -> Void) -> <%= type.name %> {
        var mutableComponent: <%= type.name %> = <%= type.name %>(id: CyanicConstants.invalidID)
        configuration(&mutableComponent)
        mutableComponent.width = self.width
        guard ComponentStateValidator.hasValidIdentifier(mutableComponent)
            else { fatalError("You must have a unique identifier for this component") }
    <%_ if type.annotations["RequiredVariables"] != nil { -%>
        guard ComponentStateValidator.validate<%= type.name %>(mutableComponent)
            else { fatalError("You did not configure all required variables in this component") }
    <%_ } -%>
        self.add(mutableComponent)
        return mutableComponent
    }
<%_ } -%>
}

public extension SectionController {
<%_ for type in types.all where type.annotations["AutoGenerateComponentExtension"] != nil {-%>
<%_ let functionName: String = lowerCamelCaseName(for: type) -%>

    /**
        Generates a <%= type.name %> instance and configures its properties with the given closure. You must provide a
        unique id in the configuration block, otherwise it will force a fatalError.
        - Parameters:
            - configuration: The closure that mutates the mutable <%= type.name %>.
            - mutableComponent: The <%= type.name %> instance to be mutated/configured.
        - Returns:
            <%= type.name %>
    */
    @discardableResult
    mutating func <%= functionName %>(for supplementaryView: SectionController.SupplementaryView, configuration: (_ mutableComponent: inout <%= type.name %>) -> Void) -> <%= type.name %> {
        var mutableComponent: <%= type.name %> = <%= type.name %>(id: CyanicConstants.invalidID)
        configuration(&mutableComponent)
        mutableComponent.width = self.width
        guard ComponentStateValidator.hasValidIdentifier(mutableComponent)
            else { fatalError("You must have a unique identifier for this component") }
    <%_ if type.annotations["RequiredVariables"] != nil { -%>
        guard ComponentStateValidator.validate<%= type.name %>(mutableComponent)
            else { fatalError("You did not configure all required variables in this component") }
    <%_ } -%>

        switch supplementaryView {
            case .header:
                self.headerComponent = mutableComponent.asAnyComponent
            case .footer:
                self.footerComponent = mutableComponent.asAnyComponent
        }

        return mutableComponent
    }
<%_ } -%>
}
// swiftlint:enable all
// sourcery:end
